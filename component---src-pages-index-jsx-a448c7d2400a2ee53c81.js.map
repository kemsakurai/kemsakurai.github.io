{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx","webpack:///./src/components/SEO/index.jsx"],"names":["Index","render","postEdges","this","props","data","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layout__WEBPACK_IMPORTED_MODULE_3__","location","title","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","config","siteTitle","rel","href","siteUrl","_components_SEO__WEBPACK_IMPORTED_MODULE_5__","_components_PostListing__WEBPACK_IMPORTED_MODULE_4__","React","Component","pageQuery","PostTags","tags","react__WEBPACK_IMPORTED_MODULE_2___default","map","tag","gatsby_link__WEBPACK_IMPORTED_MODULE_3___default","key","style","textDecoration","to","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","label","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","strArray","resultArray","match","length","first","shift","replace","i","component","TypeError","push","str","join","parts","split","normalize","arguments","slice","call","module","exports","undefined","__webpack_require__","__esModule","MediaOverlay","Media","_Media3","_interopRequireDefault","_MediaOverlay3","obj","default","PostPreview","_this","_Component","state","mobile","handleResize","bind","assertThisInitialized_default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","cover","startsWith","__PATH_PREFIX__","coverHeight","react_default","Card_default","path","raise","gatsby_link_default","Media_default","backgroundImage","height","CardTitle_default","Buttons_default","raised","secondary","PostListing","getPostList","postList","forEach","postEdge","node","fields","slug","frontmatter","date","excerpt","timeToRead","post","components_PostPreview","SEO","description","image","postURL","_this$props","postNode","postPath","postSEO","postMeta","urljoin","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","url","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-pages-index-jsx-a448c7d2400a2ee53c81.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <Layout location={this.props.location} title=\"Home\">\n        <div className=\"index-container\">\n          <Helmet>\n            <title>{config.siteTitle}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}`} />\n          </Helmet>\n          <SEO postEdges={postEdges} />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport Link from \"gatsby-link\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag =>\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Link from \"gatsby-link\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\"*/\n    const cover = postInfo.cover.startsWith(\"/\")\n      ? __PATH_PREFIX__ + postInfo.cover\n      : postInfo.cover;\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--6\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n          <Media\n            style={{\n              backgroundImage: `url(${cover})`,\n              height: `${coverHeight}px`\n            }}\n            className=\"post-preview-cover\"\n          >\n            <MediaOverlay>\n              <CardTitle title={postInfo.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;"],"sourceRoot":""}