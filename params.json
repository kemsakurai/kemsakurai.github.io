{"name":"Kemsakurai.GitHub.io","tagline":"","body":"# MonoTalk\r\nこのライブラリはAndroid用のORマッピングライブラリです。\r\n煩雑な実装になりがちなAndroidのDB周辺実装を簡略化することを目的としています。  \r\nアンドロイドアプリを作っていたつもりでしたが、アプリはできずにライブラリとなりました。\r\n\r\n[Active Android](https://github.com/pardom/ActiveAndroid), [Ollie](https://github.com/pardom/ollie/), [Sprinkles](https://github.com/emilsjolander/sprinkles),\r\n[DBFlow](https://github.com/Raizlabs/DBFlow),[greenDAO](http://greendao-orm.com),[DBFlute](http://dbflute.seasar.org),[S2JDBC](http://s2container.seasar.org/2.4/ja/s2jdbc.html)\r\n等の実装を参考にしながら作成しています。  \r\n基本機能は動作しますが、外部IFなどはまだ変更予定です。\r\n\r\n\r\n## 機能概要\r\n当ライブラリには以下の機能があります。\r\n- Entityクラスに記述したアノテーションからテーブルを作成します。\r\n- 複数DBの管理が可能です。\r\n- TABLEクラスからクエリを作成し、単純なCRUDな可能です。\r\n- 少し難しいクエリはクエリオブジェクトを使用して作成が可能です。\r\n- 難しいクエリは2waysqlを作成して実行が可能です。\r\n\r\n\r\n## 導入方法\r\nbuild.gradleに以下のmavenリポジトリの設定を追加してください。  \r\n\r\n    repositories {\r\n          maven { url 'https://kemsakurai.github.io/maven/master/releases' }\r\n    }\r\n    \r\nbuild.gradleの以下の依存関係を追加してください。  \r\n    \r\n    dependencies {\r\n         compile 'MonoTalk:monotalk-db:0.0.1'\r\n    }\r\n\r\n## 使用方法\r\n\r\nApplicationを継承したクラスに以下のような記述を追加してください。  \r\n\r\n```java\r\n\tpublic class SampleApplication extends android.app.Application {\r\n\t    \r\n\t\t@Override\r\n    \tpublic void onCreate() {\r\n        \tsuper.onCreate();\r\n\r\n\t\t\t// builderをnewする\r\n\t        DatabaseConfigration.Builder builder = new DatabaseConfigration.Builder();\r\n    \t    // batabase名を設定\r\n\t\t\tbuilder.setDataBaseName(\"NotesDB\");\r\n\t\t\t// version番号を設定\r\n        \tbuilder.setVersion(1);\r\n\t\t\t// default(プライマリ?) Databaseとして使用する場合,true (初期値true)\r\n        \tbuilder.setDefalutDatabase(true);\r\n        \t// Databaseに関連づけするEntityクラスを設定\r\n\t\t\tbuilder.addTable(Notes.class);\r\n        \tbuilder.addTable(NoteTag.class);\r\n        \tbuilder.addTable(Tag.class);\r\n\t\t\t// 初期化\r\n        \tMonoTalk.init(getApplicationContext(), builder.create());\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t    public void onTerminate() {\r\n        \tsuper.onTerminate();\r\n\t        MonoTalk.dispose();\r\n    \t}\r\n\t}\r\n```\r\n\r\n## Entity(Table)クラスの作成\r\n\r\n- DATABASEのテーブル定義に対応するEntityクラスを作成します。  \r\n(初期化時にEntityクラスの指定が必要になるので、実際はこちらを先に実施すると思います。)  \r\n- EntityクラスはEntityを継承して作成する必要があります。  \r\n- @Tableアノテーションで作成するTableを指定し、    \r\n@Columnアノテーションで作成するColumn名を指定します。  \r\n- @ColumnにはPK指定はできません。  \r\n(Create Table DDL実行時に、_id カラムをAUTOINCREMENT 指定の主キーとして作成します。)  \r\n- 自然キーとなる項目には、Columnアノテーションのunique属性、  \r\nもしくは、@Uniqueアノテーションでunique制約を付与してください。  \r\n\r\n```java\r\n\t@Table(name = \"NOTES\")\r\n    public class Notes extends Entity {\r\n        public static final String TITLE = \"TITLE\";\r\n        public static final String BODY = \"BODY\";\r\n        public static final String DATE = \"DATE\";\r\n\r\n        @Column(name = TITLE)\r\n        public String title;\r\n\r\n        @Column(name = BODY)\r\n        @NotNull\r\n        public String body;\r\n\r\n        @Column(name = DATE)\r\n        public Date date;\r\n    }\r\n```\r\n## データの登録 更新 削除  \r\n\r\n  EntityManagerクラスを使用した単純なCRUD    \r\n  クエリオブジェクトを使用したCRUD  \r\n\t2waysqlを使用したCRUDが実行できます。  \r\n\t*2waysqlは現在READのみ可能です。\r\n\t\r\n#### EntityManagerクラスを使用したCRUD\r\nINSERT  \r\n```java\r\n\tEntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n    Notes notes = new Notes();\r\n    notes.title = \"Title1\";\r\n    notes.body = \"Hello World1\";\r\n    long id = manager.insert(notes);\r\n\r\n\t// ## Null除外する際は、insertExcludesNullが使用可能です。\r\n    Notes notes = new Notes();\r\n    notes.title = null;\r\n    notes.body = \"Hello World1\";\r\n    long id = manager.insertExcludesNull(notes);\r\n```\r\nUPDATE  \r\n\r\n```java\r\n\tEntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n\tNotes notes = new Notes();\r\n    long id = 111l;\r\n    notes.id = id;\r\n    notes.title = \"Title1\";\r\n    notes.body = \"Hello World1\";\r\n    manager.update(notes);\r\n\r\n\t// ## Null除外する際は、updateExcludesNullが使用可能です。\r\n\tNotes notes = new Notes();\r\n    long id = 111l;\r\n    notes.id = id;\r\n    notes.title = null;\r\n    notes.body = \"Hello World1\";\r\n    manager.updateExcludesNull(notes);\r\n\t\r\n    // ## SQliteDatabaseと同じIFでの更新\r\n    ContentValues value = new ContentValues();\r\n    value.put(Notes.TITLE, \"TEST\");\r\n    manager.updateById(Notes.class, value, 1l);\r\n```\r\nDELETE\r\n```java\r\n    EntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n    Notes notes = new Notes();\r\n    long id = 111l;\r\n    notes.id = id;\r\n    manager.delete(notes);\r\n\r\n    // Class と IDを指定して削除する\r\n    manager.deleteById(Notes.class, 111l);\r\n    // Class Where句 Bind変数を指定して削除する\r\n    manager.delete(Notes.class, \"_id=?\", 111l);\r\n    // Table Where句 Bind変数を指定して削除する\r\n    manager.delete(\"NOTES\",  \"_id=?\", 111l);\t\r\n```\r\n\r\n### クエリオブジェクトを使用したCRUD  \r\nクエリオブジェクトはentitymanagrのnew...で始まるメソッドを使用して生成します。  \r\nINSERT\r\n```java\r\n    EntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n    manager.newInsertInto(Notes.class).value(Notes.TITLE, \"TEST\").execute();\r\n\t\r\n    // monotalk.db.query.QueryUtils#from()をstatic importして、 \r\n    // EntityオブジェクトからContentsValueを生成して登録します。\r\n    EntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n    Notes notes = new Notes();\r\n    notes.body = \"Hello World1\";\r\n    manager.newInsert(Notes.class).values(from(notes, Notes.TITLE)).execute();\r\n\t\r\n```\r\nUPDATE\r\n```java\r\n        EntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n        manager.newUpdate(Notes.class).as(\"Notes\")\r\n                .value(\"TITLE\", \"Hello\")\r\n                .where(\"_id\").eq(111l);\r\n        \r\n\t\t\r\n        Notes notes = new Notes();\r\n        notes.id = 100l;\r\n        // monotalk.db.query.QueryUtils#idEquals()をstatic importして、 \r\n        // EntityオブジェクトからContentsValueを生成して登録します。\r\n        manager.newUpdate(Notes.class).as(\"Notes\")\r\n                .value(\"TITLE\", \"Hello\")\r\n                .where(idEquals(notes));\r\n       \t\r\n```\r\nDELETE\r\n```java\r\n        EntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n        //  delete from notes where _id = 111;\r\n        manager.newDelete(Notes.class)\r\n               .where(\"_id\").eq(111l);\r\n        //  delete from notes where _id in (11,22,33);\r\n        manager.newDelete(Notes.class)\r\n               .where(\"_id\").in(11l,22l,33l);\r\n        //  delete from notes where DATE < \"date.getTime();\"\r\n        manager.newDelete(Notes.class)\r\n               .where(\"DATE\").lt(new Date());\r\n\r\n```\r\nSELECT\r\n```java \r\n        EntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n        \r\n        // Cursorで取得\r\n        Cursor cursor = manager.newSelect(\r\n                \"TITLE\",\r\n                \"BODY\",\r\n                \"DATE\")\r\n                .from(Notes.class)\r\n                .where(\"DATE\").eq(new Date())\r\n                .orderBy(\"TITLE\")\r\n                .limit(2)\r\n                .offset(3).selectCursor();\r\n\r\n        // Entity 1要素を取得\r\n        Notes notes = manager.newSelect(\r\n                \"TITLE\",\r\n                \"BODY\",\r\n                \"DATE\")\r\n                .from(Notes.class)\r\n                .where(\"DATE\").eq(new Date())\r\n                .orderBy(\"TITLE\")\r\n                .selectOne();\r\n\r\n        // EntityListで取得\r\n        List<Notes> noteList = manager.newSelect(\r\n                \"TITLE\",\r\n                \"BODY\",\r\n                \"DATE\")\r\n                .from(Notes.class)\r\n                .where(\"DATE\").eq(new Date())\r\n                .orderBy(\"TITLE\")\r\n                .selectList();\r\n\r\n        // LazyListで取得\r\n        LazyList<Notes> noteList = manager.newSelect(\r\n                \"TITLE\",\r\n                \"BODY\",\r\n                \"DATE\")\r\n                .from(Notes.class)\r\n                .where(\"DATE\").eq(new Date())\r\n                .orderBy(\"TITLE\")\r\n                .selectLazyList();\r\n\r\n        // スカラー値を取得\r\n        long count = manager.newSelect(countRowIdAsCount())\r\n                .from(Notes.class)\r\n                .where(\"DATE\").eq(new Date())\r\n                .selectScalar(Long.class);\r\n\r\n        // Entityではないものにマッピングして取得\r\n        String title = manager.newSelect(countRowIdAsCount())\r\n                .from(Notes.class)\r\n                .where(\"DATE\").eq(new Date())\r\n                .selectOne(new RowMapper<String>() {\r\n                    @Override\r\n                    public String mapRow(Cursor cursor) {\r\n                        return cursor.getString(cursor.getColumnIndex(\"TITLE\"));\r\n                    }\r\n                });\r\n```\r\n\r\n### TWOWAYSQLを使用したSELECT  \r\n``` select.sql\r\n   SELECT \r\n         TITLE,\r\n\t BODY,\r\n\t DATE\r\n    FROM \r\n         NOTES \r\n    /*BEGIN*/\r\n    WHERE\r\n        /*IF pmb.date != null*/ \r\n\tDATE = /*pmb.date*/33333333333\r\n\t/*END*/ \r\n    /*END*/ \r\n```\r\n上記のクエリを以下の記述で実行可能です。\r\n仮に Notes.classのパッケージがcom.exampleであった場合は  \r\nassetディレクトリ配下の asset/com/example/Notes/select.sql を参照し、実行します。\r\n\r\n```java\r\n    EntityManager manager = MonoTalk.getDBManagerByDefaultDbName();\r\n    // cursorで取得\r\n    Cursor cursor = manager.newSelectBySqlFile(Notes.class, \"select.sql\")\r\n               .setParameter(\"date\", new Date())\r\n               .selectCursor();\r\n```\r\n*TWOWAYSQL parser実装は、[DBFlute](http://dbflute.seasar.org)のTWOWAYSQL parserを拝借しています。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}