{"version":3,"sources":["webpack:///./src/components/UserInfo/index.jsx","webpack:///./src/components/Disqus/index.jsx","webpack:///./src/components/PostCover/index.jsx","webpack:///./src/components/PostInfo/index.jsx","webpack:///./src/components/SocialLinks/index.jsx","webpack:///./src/components/PostSuggestions/index.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./src/components/SEO/index.jsx"],"names":["UserInfo","render","_this$props$config","this","props","config","userAvatar","userName","userLocation","userDescription","userLinks","userTwitter","expanded","userLinksElement","react_default","a","createElement","UserLinks","labeled","Card_default","className","CardTitle_default","expander","avatar","Avatars_default","src","role","title","subtitle","dist","username","options","count","CardText_default","expandable","IconSeparator_default","label","iconBefore","FontIcons_default","iconClassName","Component","PostCover","_this$props","postNode","mobile","post","frontmatter","cover","startsWith","__PATH_PREFIX__","coverHeight","style","backgroundImage","height","PostInfo","icon","date","timeToRead","gatsby_link_default","to","kebabCase_default","category","SocialLinks","postPath","url","urljoin","siteUrl","pathPrefix","iconSize","renderShareCount","filter","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","GooglePlusShareButton","GooglePlusIcon","GooglePlusShareCount","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","LinkedinShareButton","description","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","PostSuggestions","postFields","fields","prevSlug","forceFontSize","forceSize","prevTitle","nextSlug","nextTitle","PostTemplate","_this","_React$Component","call","state","handleResize","bind","assertThisInitialized_default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","slug","pathContext","postOverlapClass","data","markdownRemark","id","category_id","postDefaultCategoryID","Helmet_default","siteTitle","rel","href","type","SEO","postSEO","components_PostCover","Cards_default","components_PostInfo","dangerouslySetInnerHTML","__html","html","PostTags","tags","components_SocialLinks","components_UserInfo","components_PostSuggestions_PostSuggestions","React","pageQuery","react__WEBPACK_IMPORTED_MODULE_2___default","map","tag","gatsby_link__WEBPACK_IMPORTED_MODULE_3___default","key","textDecoration","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","image","postURL","postMeta","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","name","alternateName","siteTitleAlt","push","itemListElement","position","item","@id","headline","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","JSON","stringify","property","siteFBAppID"],"mappings":"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","file":"component---src-templates-post-jsx-603cadcaabb2e8edc53b.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport IconSeparator from \"react-md/lib/Helpers/IconSeparator\";\nimport { Follow } from \"react-twitter-widgets\";\nimport UserLinks from \"../UserLinks/UserLinks\";\nimport \"./UserInfo.scss\";\n\nclass UserInfo extends Component {\n  render() {\n    const {\n      userAvatar,\n      userName,\n      userLocation,\n      userDescription,\n      userLinks,\n      userTwitter\n    } = this.props.config;\n    const { expanded } = this.props;\n    const userLinksElement = (\n      <UserLinks config={this.props.config} labeled={expanded} />\n    );\n    if (!userAvatar && !userName && !userLocation && !userDescription) {\n      if (userLinks) {\n        return (\n          <Card className=\"md-grid md-cell md-cell--12 user-info\">\n            {userLinksElement}\n          </Card>\n        );\n      }\n      return null;\n    }\n    return (\n      <Card className=\"md-grid md-cell md-cell--12 user-info\">\n        <CardTitle\n          expander={!expanded}\n          avatar={userAvatar && <Avatar src={userAvatar} role=\"presentation\" />}\n          title={userName && userName}\n          subtitle={\n            userTwitter\n              ? <Follow\n                  username={userTwitter}\n                  options={{ count: expanded ? \"none\" : \"none\" }}\n                />\n              : \"Author\"\n          }\n        />\n        <CardText expandable={!expanded}>\n          {userLocation &&\n            <IconSeparator label={userLocation} iconBefore>\n              <FontIcon iconClassName=\"fa fa-map-marker\" />\n            </IconSeparator>}\n          <p>\n            {userDescription && userDescription}\n          </p>\n          {userLinksElement}\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default UserInfo;\n","import React, { Component } from \"react\";\nimport ReactDisqusComments from \"react-disqus-comments\";\nimport urljoin from \"url-join\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Snackbar from \"react-md/lib/Snackbars\";\nimport config from \"../../../data/SiteConfig\";\n\nclass Disqus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toasts: []\n    };\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\n  }\n\n  onSnackbarDismiss() {\n    const [, ...toasts] = this.state.toasts;\n    this.setState({ toasts });\n  }\n  notifyAboutComment() {\n    const toasts = this.state.toasts.slice();\n    toasts.push({ text: \"New comment available!\" });\n    this.setState({ toasts });\n  }\n  render() {\n    const { postNode, expanded } = this.props;\n    if (!config.disqusShortname) {\n      return null;\n    }\n    const post = postNode.frontmatter;\n    const url = urljoin(\n      config.siteUrl,\n      config.pathPrefix,\n      postNode.fields.slug\n    );\n\n    return (\n      <Card className=\"md-grid md-cell md-cell--12\">\n        <CardTitle\n          title=\"Comments\"\n          avatar={<Avatar icon={<FontIcon>comment</FontIcon>} />}\n          expander={!expanded}\n        />\n        <CardText expandable={!expanded}>\n          <ReactDisqusComments\n            shortname={config.disqusShortname}\n            identifier={post.title}\n            title={post.title}\n            url={url}\n            category_id={post.category_id}\n            onNewComment={this.notifyAboutComment}\n          />\n        </CardText>\n        <Snackbar\n          toasts={this.state.toasts}\n          onDismiss={this.onSnackbarDismiss}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default Disqus;","import React, { Component } from \"react\";\nimport \"./PostCover.scss\";\n\nclass PostCover extends Component {\n  render() {\n    const { postNode, mobile } = this.props;\n    const post = postNode.frontmatter;\n    /* eslint no-undef: \"off\"*/\n    const cover = post.cover.startsWith(\"/\")\n      ? __PATH_PREFIX__ + post.cover\n      : post.cover;\n    const coverHeight = mobile ? 180 : 350;\n    return (\n      <div\n        style={{ backgroundImage: `url(${cover})`, height: `${coverHeight}px` }}\n        className=\"md-grid md-cell--9 post-cover\"\n      />\n    );\n  }\n}\n\nexport default PostCover;\n","import React, { Component } from \"react\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Link from \"gatsby-link\";\nimport _ from \"lodash\";\nimport \"./PostInfo.scss\";\n\nclass PostInfo extends Component {\n  render() {\n    const { postNode } = this.props;\n    const post = postNode.frontmatter;\n    return (\n      <div className=\"post-info\">\n        <CardTitle\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${post.date}`}\n          subtitle={`${postNode.timeToRead} min read`}\n        />\n        <Link\n          className=\"category-link\"\n          to={`/categories/${_.kebabCase(post.category)}`}\n        >\n          <CardTitle\n            avatar={\n              <Avatar icon={<FontIcon iconClassName=\"fa fa-folder-open\" />} />\n            }\n            title={\"In category\"}\n            subtitle={post.category}\n          />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default PostInfo;\n","import React, { Component } from \"react\";\nimport {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  RedditShareButton,\n  FacebookShareCount,\n  GooglePlusShareCount,\n  LinkedinShareCount,\n  RedditShareCount,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  GooglePlusIcon,\n  LinkedinIcon,\n  RedditIcon\n} from \"react-share\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./SocialLinks.scss\";\n\nclass SocialLinks extends Component {\n  render() {\n    const { postNode, postPath, mobile } = this.props;\n    const post = postNode.frontmatter;\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    const iconSize = mobile ? 36 : 48;\n    const filter = count => (count > 0 ? count : \"\");\n    const renderShareCount = count => (\n      <div className=\"share-count\">{filter(count)}</div>\n    );\n\n    return (\n      <div className=\"social-links\">\n        <RedditShareButton url={url} title={post.title}>\n          <RedditIcon round size={iconSize} />\n          <RedditShareCount url={url}>\n            {count => renderShareCount(count)}\n          </RedditShareCount>\n        </RedditShareButton>\n        <TwitterShareButton url={url} title={post.title}>\n          <TwitterIcon round size={iconSize} />\n        </TwitterShareButton>\n        <GooglePlusShareButton url={url}>\n          <GooglePlusIcon round size={iconSize} />\n          <GooglePlusShareCount url={url}>\n            {count => renderShareCount(count)}\n          </GooglePlusShareCount>\n        </GooglePlusShareButton>\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\n          <FacebookIcon round size={iconSize} />\n          <FacebookShareCount url={url}>\n            {count => renderShareCount(count)}\n          </FacebookShareCount>\n        </FacebookShareButton>\n        <LinkedinShareButton\n          url={url}\n          title={post.title}\n          description={postNode.excerpt}\n        >\n          <LinkedinIcon round size={iconSize} />\n          <LinkedinShareCount url={url}>\n            {count => renderShareCount(count)}\n          </LinkedinShareCount>\n        </LinkedinShareButton>\n        <TelegramShareButton url={url}>\n          <TelegramIcon round size={iconSize} />\n        </TelegramShareButton>\n      </div>\n    );\n  }\n}\n\nexport default SocialLinks;","import React, { Component } from \"react\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Link from \"gatsby-link\";\nimport \"./PostSuggestions.scss\";\n\nexport default class PostSuggestions extends Component {\n  render() {\n    const { postNode } = this.props;\n    const postFields = postNode.fields;\n    return (\n      <div className=\"post-suggestions md-grid md-cell--12\">\n        <Link to={postFields.prevSlug} className=\"post-suggestion\">\n          <FontIcon\n            forceFontSize\n            forceSize=\"64\"\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_back\n          </FontIcon>\n          <div className=\"headline-container hide-on-mobile\">\n            <h2 className=\"md-body-2 secondary-color\">Previous</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.prevTitle}\n            </h6>\n          </div>\n        </Link>\n        <Link to={postFields.nextSlug} className=\"post-suggestion\">\n          <div className=\"headline-container\">\n            <h2 className=\"md-body-2 secondary-color\">Next</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.nextTitle}\n            </h6>\n          </div>\n          <FontIcon\n            forceFontSize\n            forceSize=\"64\"\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_forward\n          </FontIcon>\n        </Link>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Card from \"react-md/lib/Cards\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Layout from \"../layout\";\nimport UserInfo from \"../components/UserInfo\";\nimport Disqus from \"../components/Disqus\";\nimport PostTags from \"../components/PostTags\";\nimport PostCover from \"../components/PostCover\";\nimport PostInfo from \"../components/PostInfo\";\nimport SocialLinks from \"../components/SocialLinks\";\nimport PostSuggestions from \"../components/PostSuggestions\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./b16-tomorrow-dark.css\";\nimport \"./post.scss\";\n\nexport default class PostTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { mobile } = this.state;\n    const { slug } = this.props.pathContext;\n    const expanded = !mobile;\n    const postOverlapClass = mobile ? \"post-overlap-mobile\" : \"post-overlap\";\n    const postNode = this.props.data.markdownRemark;\n    const post = postNode.frontmatter;\n    if (!post.id) {\n      post.id = slug;\n    }\n    if (!post.id) {\n      post.category_id = config.postDefaultCategoryID;\n    }\n    return (\n      <div className=\"post-page md-grid md-grid--no-spacing\">\n        <Helmet>\n          <title>{`${post.title} | ${config.siteTitle}`}</title>\n          <link rel=\"canonical\" href={`${config.siteUrl}${post.id}`} />\n          {/* dataLayer */}\n          <script>{`\n            var userTypes = ['A','B','C'];\n            var userType = userTypes[Math.floor(Math.random() * userTypes.length)];\n            window.dataLayer = window.dataLayer || [];\n            dataLayer.push({'userType': userType});\n          `}</script>\n          <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/showdown/1.8.2/showdown.js\"></script>          \n        </Helmet>\n        <SEO postPath={slug} postNode={postNode} postSEO />\n        <PostCover postNode={postNode} mobile={mobile} />\n        <div className={`md-grid md-cell--12 post-page-contents mobile-fix ${postOverlapClass}`} >\n          <Card className=\"md-grid md-cell md-cell--12 post\">\n            <CardText className=\"post-body\">\n              <h1 className=\"md-display-2 post-header\">\n                {post.title}\n              </h1>\n              <PostInfo postNode={postNode} />\n              <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n            </CardText>\n            <div className=\"post-meta\">\n              <PostTags tags={post.tags} />\n              <SocialLinks\n                postPath={slug}\n                postNode={postNode}\n                mobile={this.state.mobile}\n              />\n            </div>\n          </Card>\n          <UserInfo\n            className=\"md-grid md-cell md-cell--12\"\n            config={config}\n            expanded={expanded}\n          />\n        </div>\n        <PostSuggestions postNode={postNode} />\n      </div>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\"*/\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        date\n        category\n        tags\n      }\n      fields {\n        nextTitle\n        nextSlug\n        prevTitle\n        prevSlug\n        slug\n        date\n      }\n    }\n  }\n`;","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport Link from \"gatsby-link\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag =>\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;"],"sourceRoot":""}